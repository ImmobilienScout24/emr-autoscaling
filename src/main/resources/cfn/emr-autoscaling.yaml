Parameters:
  scalingFunctionCodeBucket:
    Type: "String"
  emrJobFlowId:
    Type: "String"
  emrDownScalingMemoryAllocationThreshold:
    Type: "Number"
    Default: 0.6
    MinValue: 0.0
    MaxValue: 1.0
  emrScalingMinInstances:
    Type: "Number"
    Default: 0
    MinValue: 0
  emrScalingMaxInstances:
    Type: "Number"
    Default: 20
    MinValue: 0
  officeHoursStart:
    Type: "Number"
    Default: 0
    MinValue: 0
    MaxValue: 24
  officeHoursEnd:
    Type: "Number"
    Default: 0
    MinValue: 0
    MaxValue: 24

Resources:
  ScalingEventsRule:
    Type: "AWS::Events::Rule"
    Properties:
      Description:
        "|Join|":
          - "Triggers the autoscaling lambda function for the EMR cluster with id "
          - "|Ref|emrJobFlowId"
          - "every 5 minutes"
      Name:
        "|Join|":
          - "EmrAutoScaling-"
          - "|Ref|emrJobFlowId"
      ScheduleExpression: "rate(5 minutes)"
      State: "ENABLED"
      Targets:
        -
          Arn: "|GetAtt|ScalingFunction|Arn"
          Id: "ScalingFunction"
          Input:
            "|Join|":
              - "{\"Threshold\": "
              - "|Ref|emrDownScalingMemoryAllocationThreshold"
              - ", \"JobFlowId\": \""
              - "|Ref|emrJobFlowId"
              - "\", \"MinInstances\": "
              - "|Ref|emrScalingMinInstances"
              - ", \"MaxInstances\": "
              - "|Ref|emrScalingMaxInstances"
              - ", \"OfficeHoursStart\": "
              - "|Ref|officeHoursStart"
              - ", \"OfficeHoursEnd\": "
              - "|Ref|officeHoursEnd"
              - "}"
  ScalingFunction:
    Type: "AWS::Lambda::Function"
    Properties:
      Code:
        S3Bucket: "|Ref|scalingFunctionCodeBucket"
        S3Key: "emr/lambda_autoscaling/latest/emr-autoscaling.zip"
      Description: "A lambda function that scales EMR clusters depending on the load"
      Handler: "scaler_lambda.lambda_handler"
      Role: "|GetAtt|ScalingFunctionRole|Arn"
      Runtime: "python2.7"
  ScalingFunctionRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          -
            Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action: "sts:AssumeRole"
      Policies:
        -
          PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              -
                Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "arn:aws:logs:*:*:*"
              -
                Effect: "Allow"
                Action:
                  - "elasticmapreduce:ListClusters"
                  - "elasticmapreduce:ListInstanceGroups"
                  - "elasticmapreduce:ModifyInstanceGroups"
                Resource: "*"
              -
                Effect: "Allow"
                Action: "cloudwatch:GetMetricStatistics"
                Resource: "*"
  ScalingFunctionInvocationPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName: "|GetAtt|ScalingFunction|Arn"
      Action: "lambda:InvokeFunction"
      Principal: "events.amazonaws.com"
      SourceArn:
        "|Join|:":
        - "arn"
        - "aws"
        - "events"
        - "|Ref|AWS::Region"
        - "|Ref|AWS::AccountId"
        - "rule/*"
